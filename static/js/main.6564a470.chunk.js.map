{"version":3,"sources":["components/imageCard.jsx","components/imageSearch.jsx","components/header.jsx","components/footer.jsx","App.js","index.js"],"names":["ImageCard","image","tags","split","className","id","src","webformatURL","alt","user","views","downloads","likes","map","tag","index","key","ImageSearch","searchText","useState","text","setText","onSubmit","e","preventDefault","onChange","target","value","type","placeholder","Header","Footer","App","images","setImages","isLoading","setIsLoading","term","setTerm","useEffect","fetch","process","then","response","json","data","hits","catch","err","console","log","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0KAuCeA,EArCG,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAEXC,EAAOD,EAAMC,KAAKC,MAAM,KAE9B,OACI,yBAAKC,UAAU,sEAAsEC,GAAG,eAE1F,yBAAKC,IAAKL,EAAMM,aAAcH,UAAU,mCAAmCI,IAAI,WAC/E,yBAAKJ,UAAU,aACb,yBAAKA,UAAU,0CAAf,YACYH,EAAMQ,MAElB,4BACE,4BACE,2CAAyBR,EAAMS,OAEjC,4BACE,+CAA6BT,EAAMU,WAErC,4BACE,2CAAyBV,EAAMW,SAKrC,yBAAKR,UAAU,aAETF,EAAKW,KAAI,SAACC,EAAKC,GAAN,OACL,0BAAMC,IAAKD,EAAOX,UAAU,qGAA5B,IAAkIU,SCFnIG,EAzBK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACVC,mBAAS,IADC,mBAC5BC,EAD4B,KACtBC,EADsB,KAUpC,OACI,yBAAKjB,UAAU,kDACX,0BAAMkB,SATM,SAACC,GACjBA,EAAEC,iBAGFN,EAAWE,IAKuBhB,UAAU,mBACpC,yBAAKA,UAAU,kEACX,2BAAOqB,SAAU,SAAAF,GAAC,OAAIF,EAAQE,EAAEG,OAAOC,QAAQC,KAAK,OAAOC,YAAY,oBAAoBzB,UAAU,oHACrG,4BAAQA,UAAU,kIAAkIwB,KAAK,UAAzJ,cCPLE,EATA,WAEX,OACI,4BAAQ1B,UAAU,eACd,wBAAIA,UAAU,0BAAd,sBCKG2B,EATA,WAEX,OACI,4BAAQ3B,UAAU,oBACd,uBAAGA,UAAU,yBAAb,sCCkDG4B,MAjDf,WAAe,MAEiBb,mBAAS,IAF1B,mBAELc,EAFK,KAEGC,EAFH,OAIuBf,oBAAS,GAJhC,mBAILgB,EAJK,KAIMC,EAJN,OAMYjB,mBAAS,IANrB,mBAMNkB,EANM,KAMAC,EANA,KAoBb,OAXAC,qBAAU,WACRC,MAAM,gCAAD,OAAiCC,qCAAjC,cAA4EJ,EAA5E,kCACJK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJX,EAAUW,EAAKC,MACfV,GAAa,MAEdW,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QACzB,CAACX,IAIF,yBAAKjC,UAAU,+BAEb,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAac,WAAY,SAACE,GAAD,OAAUkB,EAAQlB,OAEzCe,GAA+B,IAAlBF,EAAOkB,QAAgB,wBAAI/C,UAAU,oDAAd,sBAGpC+B,EACA,wBAAI/B,UAAU,oDAAd,kBACC,yBAAKA,UAAU,4CAEZ6B,EACAA,EAAOpB,KAAI,SAAAZ,GAAK,OACd,kBAAC,EAAD,CAAWe,IAAKf,EAAMI,GAAIJ,MAAOA,OAEjC,uBAKR,kBAAC,EAAD,QC7CNmD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.6564a470.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ImageCard = ({ image }) => {\r\n    //lets take the image tags which are comma seprated and split them into the tag span\r\n    const tags = image.tags.split(',');\r\n\r\n    return (\r\n        <div className=\"max-w-sm rounded overflow-hidden shadow-md hover:shadow-lg relative\" id=\"image-cards\">\r\n\r\n      <img src={image.webformatURL} className=\"w-full h-64 sm:h-48 object-cover\" alt=\"random\"/>\r\n      <div className=\"px-6 py-4\">\r\n        <div className=\"font-bold text-purple-500 text-xl mb-2\">\r\n          Photo by {image.user}\r\n        </div>\r\n        <ul>\r\n          <li>\r\n            <strong>Views: </strong>{image.views}\r\n          </li>\r\n          <li>\r\n            <strong>Downloads: </strong>{image.downloads}\r\n          </li>\r\n          <li>\r\n            <strong>Likes: </strong>{image.likes}\r\n          </li>\r\n        </ul>\r\n      \r\n      </div>\r\n      <div className=\"px-6 py-4\">\r\n        {\r\n            tags.map((tag, index) => (\r\n                <span key={index} className=\"inline-block bg-gray-200 rounded-full px-2 py-1 text-sm font-semibold text-gray-700 mr-1 tag-span\">#{tag}</span>\r\n            ))\r\n        }\r\n\r\n      </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ImageCard;","import React, { useState } from 'react';\r\n\r\n\r\nconst ImageSearch = ({ searchText }) => {\r\n    const [ text, setText ] = useState('');\r\n\r\n    const handleSubmit= (e) => {\r\n        e.preventDefault();\r\n\r\n        //we pass in whatever is in our text in the local state i.e what we have in input\r\n        searchText(text);\r\n    };\r\n\r\n    return (\r\n        <div className=\"max-w-sm rounded overflow-hidden my-10 mx-auto\">\r\n            <form onSubmit={handleSubmit} className=\"w-full max-w-sm\">\r\n                <div className=\"flex items-center border-solid border-b-2 border-teal-200 py-2\">\r\n                    <input onChange={e => setText(e.target.value)} type=\"text\" placeholder=\"search image term\" className=\"appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none\"/>\r\n                    <button className=\"flex-shrink-0 bg-teal-500 hover:bg-teal-700 border-teal-500 hover:border-teal-700 text-sm border-4 text-white py-1 px-2 rounded\" type=\"submit\">\r\n                        Search\r\n                    </button>\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageSearch;","import React from 'react';\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <header className=\"text-center\">\r\n            <h1 className=\"text-teal-700 text-6xl\">Flex The Gallery</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n\r\n    return (\r\n        <footer className=\"text-center mt-8\">\r\n            <p className=\"text-teal-300 text-sm\">Created with React by Folu‚ù§</p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { useState, useEffect } from 'react';\n\nimport ImageCard from './components/imageCard';\nimport ImageSearch from './components/imageSearch';\nimport Header from './components/header';\nimport Footer from './components/footer';\n\nfunction App() {\n    //this is gonna get filled once we make our request\n  const [ images, setImages ] = useState([]);\n  //we are going to have isloading, we are setting it to true so that when we fetch we set it to false and can be used in our component\n  const [ isLoading, setIsLoading ] = useState(true);\n  //we gonna have a search term, we will have an empty string by default\n  const[ term, setTerm ] = useState('');\n\n  //lets add our useEffect, we will use our fetchapi\n  useEffect(() => {\n    fetch(`https://pixabay.com/api/?key=${process.env.REACT_APP_PIXABAY_API_KEY}&q=${term}&image_type=photo&pretty=true`)\n    .then(response => response.json())\n    .then(data => {\n      setImages(data.hits);\n      setIsLoading(false);\n    })\n    .catch(err => console.log(err))\n  }, [term]); //for the fetch to be called again we need to add term as a dependency i.e whenever a term changes it will run again\n  \n\n  return (\n    <div className=\"container mx-auto my-8 px-8\">\n\n      <Header/>\n\n      <ImageSearch searchText={(text) => setTerm(text)} />\n\n      {!isLoading && images.length === 0 && <h1 className=\"text-5xl text-center mx-auto text-blue-700 mt-32\">No Images Found...</h1> }\n\n      {\n        isLoading ? \n        <h1 className=\"text-6xl text-center mx-auto text-blue-700 mt-32\">Please wait...</h1>\n        :<div className=\"grid md:grid-cols-3 sm:grid-cols-1 gap-4\">\n          {\n            images ? \n            images.map(image => (\n              <ImageCard key={image.id} image={image}/>\n            ))\n            : \"Page not loading...\"\n          }\n        </div>\n      }\n\n      <Footer/>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}